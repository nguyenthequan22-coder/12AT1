// app.js - 12AT1 Application
console.log('üöÄ 12AT1 App.js loaded');

// Bi·∫øn to√†n c·ª•c
let deferredPrompt;
let currentPage = 'home';

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi DOM ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìö 12AT1 App Initializing...');
    
    // Kh·ªüi t·∫°o c√°c ch·ª©c nƒÉng
    initApp();
    registerServiceWorker();
    setupEventListeners();
    checkNewContent();
    
    // Ki·ªÉm tra n·∫øu c·∫ßn hi·ªÉn th·ªã TKB t·ª´ trang ch·ªß
    if (localStorage.getItem('showTKB') === 'true') {
        showPage('tkb');
        localStorage.removeItem('showTKB');
    }
});

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng
function initApp() {
    console.log('üéØ Initializing app...');
    
    // Hi·ªÉn th·ªã trang m·∫∑c ƒë·ªãnh
    showPage('home');
    
    // Hi·ªÉn th·ªã popup th√¥ng b√°o sau 2 gi√¢y
    setTimeout(showPopup, 2000);
    
    // Kh·ªüi t·∫°o hi·ªáu ·ª©ng hoa r∆°i
    initFlowerEffect();
    
    console.log('‚úÖ App initialized successfully');
}

// ƒêƒÉng k√Ω Service Worker
function registerServiceWorker() {
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js')
            .then(function(registration) {
                console.log('‚úÖ Service Worker registered with scope:', registration.scope);
            })
            .catch(function(error) {
                console.log('‚ùå Service Worker registration failed:', error);
            });
    } else {
        console.log('‚ùå Service Worker not supported');
    }
}

// Thi·∫øt l·∫≠p event listeners
function setupEventListeners() {
    // L·∫Øng nghe s·ª± ki·ªán beforeinstallprompt cho PWA
    window.addEventListener('beforeinstallprompt', (e) => {
        console.log('üöÄ beforeinstallprompt event fired');
        e.preventDefault();
        deferredPrompt = e;
        
        // Hi·ªÉn th·ªã prompt c√†i ƒë·∫∑t sau 5 gi√¢y
        setTimeout(showInstallPrompt, 5000);
    });

    // L·∫Øng nghe s·ª± ki·ªán app installed
    window.addEventListener('appinstalled', (evt) => {
        console.log('‚úÖ PWA was installed successfully');
        hideInstallPrompt();
    });

    // Ki·ªÉm tra n·∫øu app ƒë√£ ch·∫°y ·ªü ch·∫ø ƒë·ªô standalone
    if (window.matchMedia('(display-mode: standalone)').matches) {
        console.log('üì± App running in standalone mode');
        hideInstallPrompt();
    }
}

// Hi·ªÉn th·ªã prompt c√†i ƒë·∫∑t PWA
function showInstallPrompt() {
    const installPrompt = document.getElementById('installPrompt');
    if (installPrompt && deferredPrompt) {
        installPrompt.style.display = 'block';
        console.log('üì± Showing install prompt');
    }
}

// ·∫®n prompt c√†i ƒë·∫∑t
function hideInstallPrompt() {
    const installPrompt = document.getElementById('installPrompt');
    if (installPrompt) {
        installPrompt.style.display = 'none';
    }
}

// C√†i ƒë·∫∑t ·ª©ng d·ª•ng
function installApp() {
    if (!deferredPrompt) {
        console.log('‚ùå No deferred prompt available');
        return;
    }

    console.log('üì± Installing app...');
    deferredPrompt.prompt();
    
    deferredPrompt.userChoice.then((choiceResult) => {
        if (choiceResult.outcome === 'accepted') {
            console.log('‚úÖ User accepted the install prompt');
        } else {
            console.log('‚ùå User dismissed the install prompt');
        }
        deferredPrompt = null;
        hideInstallPrompt();
    });
}

// ƒê√≥ng prompt c√†i ƒë·∫∑t
function closeInstallPrompt() {
    console.log('üì± Install prompt closed');
    hideInstallPrompt();
}

// Hi·ªÉn th·ªã popup th√¥ng b√°o
function showPopup() {
    const popup = document.getElementById('popup');
    if (popup) {
        popup.style.display = 'flex';
        console.log('üí° Showing info popup');
    }
}

// ƒê√≥ng popup th√¥ng b√°o
function closePopup() {
    const popup = document.getElementById('popup');
    if (popup) {
        popup.style.display = 'none';
        console.log('üí° Info popup closed');
    }
}

// Ki·ªÉm tra n·ªôi dung m·ªõi
function checkNewContent() {
    const lastVisit = localStorage.getItem('lastVisit');
    const now = new Date().getTime();
    const newContentBadge = document.getElementById('newBadge');
    
    if (!lastVisit || (now - lastVisit) > 6 * 60 * 60 * 1000) { // 6 gi·ªù
        showNewContentNotification();
        if (newContentBadge) {
            newContentBadge.style.display = 'inline';
        }
    }
    
    localStorage.setItem('lastVisit', now);
}

// Hi·ªÉn th·ªã th√¥ng b√°o n·ªôi dung m·ªõi
function showNewContentNotification() {
    const notification = document.getElementById('newContentNotification');
    const subjectsList = document.getElementById('newSubjectsList');
    
    if (notification && subjectsList) {
        subjectsList.textContent = 'C√≥ b√†i t·∫≠p m·ªõi c√°c m√¥n: ƒê·ªãa l√Ω, V·∫≠t l√Ω, H√≥a h·ªçc';
        notification.style.display = 'block';
        console.log('üì¢ Showing new content notification');
    }
}

// ƒê√≥ng th√¥ng b√°o n·ªôi dung m·ªõi
function closeNewNotification() {
    const notification = document.getElementById('newContentNotification');
    if (notification) {
        notification.style.display = 'none';
        console.log('üì¢ New content notification closed');
    }
}

// Chuy·ªÉn trang
function showPage(page) {
    console.log('üîÑ Switching to page:', page);
    
    // ·∫®n t·∫•t c·∫£ c√°c trang
    const homePage = document.getElementById('home');
    const tkbPage = document.getElementById('tkb');
    
    if (homePage) homePage.style.display = 'none';
    if (tkbPage) tkbPage.style.display = 'none';
    
    // C·∫≠p nh·∫≠t menu active
    updateActiveMenu(page);
    
    // Hi·ªÉn th·ªã trang ƒë∆∞·ª£c ch·ªçn
    switch(page) {
        case 'home':
            if (homePage) homePage.style.display = 'block';
            currentPage = 'home';
            break;
        case 'tkb':
            if (tkbPage) tkbPage.style.display = 'block';
            currentPage = 'tkb';
            break;
        default:
            if (homePage) homePage.style.display = 'block';
            currentPage = 'home';
    }
    
    console.log('‚úÖ Page switched to:', page);
}

// C·∫≠p nh·∫≠t menu active
function updateActiveMenu(activePage) {
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => {
        link.classList.remove('active');
        
        if (activePage === 'home' && link.textContent === 'B√†i T·∫≠p') {
            link.classList.add('active');
        } else if (activePage === 'tkb' && link.textContent === 'Th·ªùi Kh√≥a Bi·ªÉu') {
            link.classList.add('active');
        } else if (activePage === 'kiemtra' && link.getAttribute('href') === 'kiemtra.html') {
            link.classList.add('active');
        }
    });
}

// Chuy·ªÉn ƒë·∫øn trang TKB t·ª´ menu
function goToTKB() {
    console.log('üìÖ Redirecting to schedule page');
    localStorage.setItem('showTKB', 'true');
}

// ƒê√°nh d·∫•u chuy·ªÉn trang n·ªôi b·ªô
function setFromInternal() {
    sessionStorage.setItem('fromInternal', 'true');
    console.log('üîó Internal navigation marked');
}

// Kh·ªüi t·∫°o hi·ªáu ·ª©ng hoa r∆°i
function initFlowerEffect() {
    console.log('üå∏ Initializing flower effect');
    // Hi·ªáu ·ª©ng hoa s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi setInterval
}

// T·∫°o hi·ªáu ·ª©ng hoa r∆°i
function createFlower() {
    const flower = document.createElement('div');
    const flowers = ['üå∏', 'üå∫', 'üíÆ', 'üèµÔ∏è', 'üåº', 'üåª'];
    flower.innerHTML = flowers[Math.floor(Math.random() * flowers.length)];
    flower.classList.add('falling-flower');
    
    const left = Math.random() * 100;
    flower.style.left = left + 'vw';
    
    const size = Math.random() * 20 + 15;
    flower.style.fontSize = size + 'px';
    
    const duration = Math.random() * 10 + 5;
    flower.style.animationDuration = duration + 's';
    
    const flowersContainer = document.getElementById('flowers-container');
    if (flowersContainer) {
        flowersContainer.appendChild(flower);
        
        setTimeout(() => {
            if (flower.parentNode) {
                flower.remove();
            }
        }, duration * 1000);
    }
}

// T·∫°o hoa li√™n t·ª•c
setInterval(createFlower, 500);

// X·ª≠ l√Ω l·ªói to√†n c·ª•c
window.addEventListener('error', function(e) {
    console.error('üö® Global error:', e.error);
});

// Debug info
function debugInfo() {
    const debugData = {
        currentPage: currentPage,
        deferredPrompt: !!deferredPrompt,
        serviceWorker: 'serviceWorker' in navigator,
        standalone: window.matchMedia('(display-mode: standalone)').matches,
        userAgent: navigator.userAgent
    };
    console.log('üîç Debug Info:', debugData);
    return debugData;
}

// Export functions for global use (n·∫øu c·∫ßn)
window.app = {
    showPage,
    installApp,
    closeInstallPrompt,
    debugInfo
};

console.log('‚úÖ app.js loaded completely');